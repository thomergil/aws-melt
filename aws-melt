#!/usr/bin/env ruby

require 'json'
require 'time'
require 'optparse'
require 'set'

# Tool mostly written by claude.ai

unless ENV['AWS_ACCOUNT_ID'] && ENV['AWS_DEFAULT_REGION']
  puts "Please set environment variables:"
  puts "AWS_ACCOUNT_ID"
  puts "AWS_DEFAULT_REGION"
  exit 1
end

ACCOUNT_ID = ENV['AWS_ACCOUNT_ID']
REGION = ENV['AWS_DEFAULT_REGION']
VAULTS_FILE = 'vaults.txt'
MAX_PROCS = 32
POLL_INTERVAL = 1200

def run_command(cmd)
  puts "Running: #{cmd}" if $options[:verbose]
  output = `#{cmd}`
  if $options[:verbose] && !output.empty?
    puts "Output:" if $options[:verbose]
    puts output if $options[:verbose]
  end
  [output, $?.success?]
end

def initiate_inventory_job(vault)
  cmd = "aws glacier initiate-job " \
        "--account-id #{ACCOUNT_ID} " \
        "--region #{REGION} " \
        "--vault-name #{vault} " \
        "--job-parameters '{\"Type\": \"inventory-retrieval\"}'"

  output, success = run_command(cmd)
  if success
    job_id = JSON.parse(output)["jobId"]
    puts "Initiated job #{job_id} for vault #{vault}"
    job_id
  else
    warn "Failed to initiate job for vault #{vault}"
    nil
  end
end

def check_job_status(vault, job_id)
  cmd = "AWS_PAGER=\"\" aws glacier list-jobs " \
        "--account-id #{ACCOUNT_ID} " \
        "--region #{REGION} " \
        "--vault-name #{vault}"

  output, success = run_command(cmd)
  if !success
    warn "Failed to check job status for vault #{vault}"
    return false
  end

  jobs = JSON.parse(output)["JobList"]
  job = jobs.find { |j| j["JobId"] == job_id }
  if !job
    return nil
  end

  return {
     completed: job["Completed"],
     succeeded: job["StatusCode"] == "Succeeded",
     status_message: job["StatusMessage"]
   }


end

def download_inventory(vault, job_id)
  timestamp = Time.now.strftime("%Y%m%d%H%M%S")
  output_file = "#{vault}_#{job_id}_#{timestamp}.json"

  cmd = "aws glacier get-job-output " \
        "--account-id #{ACCOUNT_ID} " \
        "--region #{REGION} " \
        "--vault-name #{vault} " \
        "--job-id #{job_id} " \
        "#{output_file}"

  _, success = run_command(cmd)
  if success
    puts "Downloaded inventory to #{output_file}"
    [output_file, vault]  # Return both the filename and original vault name
  else
    warn "Failed to download inventory for vault #{vault}"
    nil
  end
end

def format_progress(total, completed, successes, failures, start_time)
  elapsed = Time.now - start_time
  rate = elapsed > 0 ? successes.to_f / elapsed : 0
  eta = rate > 0 ? ((total - successes) / rate) : 0
  hours = (eta / 3600).floor
  mins = ((eta % 3600) / 60).floor
  secs = (eta % 60).round
  eta_str = "#{hours}h#{mins}m#{secs}s"
  
  "Progress: #{completed}/#{total} (#{(completed.to_f/total*100).round(1)}%) - #{successes} succeeded, #{failures} failed - ETA: #{eta_str}"
end

def delete_archives(inventory_file, vault_name)
  begin
    inventory = JSON.parse(File.read(inventory_file))
    archive_ids = inventory["ArchiveList"].map { |a| a["ArchiveId"] }
    total = archive_ids.size
    completed = 0
    successes = 0
    failures = 0
    start_time = Time.now
    
    # Process archives in batches to avoid overwhelming the system
    batch_size = 100
    archive_ids.each_slice(batch_size) do |batch|
      processes = {}
      
      batch.each do |archive_id|
        pid = fork do
          cmd = "aws glacier delete-archive " \
                "--account-id #{ACCOUNT_ID} " \
                "--region #{REGION} " \
                "--vault-name #{vault_name} " \
                "--archive-id=\"#{archive_id}\""
          puts "Deleting archive #{archive_id} from vault #{vault_name} (PID: #{Process.pid})" if $options[:verbose]
          puts "Running: #{cmd}" if $options[:verbose]
          success = system(cmd)
          exit(success ? 0 : 1)
        end
        
        processes[pid] = archive_id if pid
        
        # Don't exceed MAX_PROCS
        while processes.size >= MAX_PROCS
          done_pid = Process.wait
          status = $?.success?
          if status
            successes += 1
          else
            failures += 1
            warn "Failed to delete archive #{processes[done_pid]}"
          end
          processes.delete(done_pid)
          completed += 1
          puts format_progress(total, completed, successes, failures, start_time)
        end
      end
      
      # Wait for remaining processes in this batch
      processes.each do |pid, archive_id|
        Process.waitpid(pid)
        status = $?.success?
        if status
          successes += 1
        else
          failures += 1
          warn "Failed to delete archive #{archive_id}"
        end
        completed += 1
        puts format_progress(total, completed, successes, failures, start_time)
      end
    end
    
    puts "Completed deletion of #{successes} archives with #{failures} failures"
    
  rescue JSON::ParserError => e
    warn "Failed to parse inventory file #{inventory_file}: #{e.message}"
  rescue Errno::ECHILD => e
    warn "Process management error: #{e.message}"
  rescue StandardError => e
    warn "Error processing inventory file #{inventory_file}: #{e.message}"
    warn e.backtrace
  end
end


def process_inventories_and_delete
  jobs = {}
  deletion_pids = {}

  # Read vaults and initiate jobs
  File.readlines(VAULTS_FILE).each do |vault|
    vault.strip!
    if job_id = initiate_inventory_job(vault)
      jobs[vault] = job_id
    end
  end

  # Monitor jobs until completion and process as they complete
  while true
    # Check if we're done
    if jobs.empty? && deletion_pids.empty?
      break
    end

    # Check existing deletion processes
    deletion_pids.reject! { |vault, pid| Process.waitpid(pid, Process::WNOHANG) rescue true }

    # Check inventory jobs
    jobs.each do |vault, job_id|
      status = check_job_status(vault, job_id)
      if !status || !status[:completed]
        next
      end

      if status[:succeeded]
        puts "Job #{job_id} for vault #{vault} completed successfully"
        if result = download_inventory(vault, job_id)
          inventory_file, vault_name = result
          pid = fork do
            delete_archives(inventory_file, vault_name)
            exit(0)
          end
          deletion_pids[vault] = pid
        end
      else
        warn "Job #{job_id} for vault #{vault} failed: #{status[:status_message]}"
      end
      jobs.delete(vault)
    end

    puts "Waiting - Inventory jobs: #{jobs.keys.join(', ')}, Deletions in progress: #{deletion_pids.keys.join(', ')}"
    sleep POLL_INTERVAL
  end
end

def process_existing_files
  processed_vaults = Set.new  # Track which vaults we've processed
  Dir.glob("*.json").each do |inventory_file|
    puts "Processing existing inventory file: #{inventory_file}"
    begin
      vaults = File.readlines(VAULTS_FILE).map(&:strip)
    rescue Errno::ENOENT
      warn "Error: #{VAULTS_FILE} not found"
      exit 1
    end
    vault_matches = vaults.select { |v| inventory_file.start_with?(v) }

    if vault_matches.empty?
      warn "Warning: Could not find matching vault in #{VAULTS_FILE} for #{inventory_file}"
      next
    end

    # Use the longest matching vault name (in case some vault names are prefixes of others)
    vault_name = vault_matches.max_by(&:length)
    delete_archives(inventory_file, vault_name)
    processed_vaults.add(vault_name)
  end
end

def main
  # Parse command line options
  $options = {}
  OptionParser.new do |opts|
    opts.banner = "Usage: glacier_cleanup.rb [options]"
    opts.on("--delete-only", "Skip inventory retrieval and only process existing JSON files") do |v|
      $options[:delete_only] = v
    end
    opts.on("--verbose", "Show command output") do |v|
      $options[:verbose] = v
    end
  end.parse!

  if $options[:delete_only]
    process_existing_files
  else
    process_inventories_and_delete
  end

  puts "Done. You still need to delete the vaults themselves."
end

main
